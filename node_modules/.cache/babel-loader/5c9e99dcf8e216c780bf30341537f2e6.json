{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\whosin\\\\Frontend\\\\src\\\\components\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Spinner } from 'react-bootstrap';\nimport useValidator from './useValidator';\nimport { addTasklist } from '../Services/userapi';\nimport { useCookies } from 'react-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = props => {\n  _s();\n\n  const [cookies, setCookie] = useCookies([]);\n  let loggedInUserId = \"\";\n  const storedData = JSON.parse(localStorage.getItem(\"MyUser\"));\n\n  if (storedData) {\n    loggedInUserId = storedData.user_id; //if(!cookies.userid){\n\n    setCookie('userid', loggedInUserId, {\n      path: '/'\n    }); //}\n  }\n\n  const [validator, showValidationMessage] = useValidator();\n  const [loading, setLoading] = useState(false);\n  const [tasklist, setTasklist] = useState({\n    tasklistname: \"\",\n    taskchallenge: \"\",\n    user_id: \"\"\n  });\n  alert(cookies.userid); // set the props as a default user_id in tasklist state\n\n  useEffect(() => {\n    if (props.loggedinuser.user_id) {\n      setTasklist({ ...tasklist,\n        user_id: props.loggedinuser.user_id\n      });\n    }\n  }, [props.loggedinuser.user_id]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const inputVal = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setTasklist({ ...tasklist,\n      [name]: value\n    });\n  };\n\n  const submittasklist = async e => {\n    e.preventDefault();\n\n    if (validator.allValid()) {\n      setLoading(true);\n      let res = await addTasklist(tasklist);\n\n      if (res.data.message === \"Tasklist Added Successfully\") {\n        alert(res.data.message);\n        setLoading(false);\n        setTasklist({\n          tasklistname: \"\",\n          taskchallenge: \"\",\n          user_id: props.loggedinuser.user_id\n        });\n      } else {\n        setLoading(false);\n        alert(res.data.message);\n      }\n    } else {\n      showValidationMessage(true);\n    }\n  }; //console.log(\"AAAA\", tasklist)\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outsider\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login\",\n        style: {\n          maxWidth: '70%'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => {\n            submittasklist(e);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'center',\n              fontSize: '18px'\n            },\n            children: \"Enter Your Tasklist and Task Challenge\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            style: {\n              height: '120px'\n            },\n            className: \"newinputval\",\n            value: tasklist.tasklistname,\n            placeholder: \"Enter your tasklist\",\n            name: \"tasklistname\",\n            onChange: inputVal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), validator.message('tasklistname', tasklist.tasklistname, 'required', {\n            className: 'text-danger spaceparttasklist',\n            messages: {\n              required: \"Tasklist is required\"\n            }\n          }), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            style: {\n              height: '100px'\n            },\n            className: \"newinputval\",\n            value: tasklist.taskchallenge,\n            placeholder: \"Enter your task challenge\",\n            name: \"taskchallenge\",\n            onChange: inputVal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this), !loading ? /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            style: {\n              marginTop: '15px',\n              width: 'auto',\n              background: 'rgba(237, 28, 36, 1)',\n              borderRadius: '3px',\n              border: '0 none',\n              padding: '15px 42px',\n              fontSize: '16px',\n              fontWeight: '500',\n              lineHeight: '16px',\n              cursor: 'pointer',\n              textTransform: 'capitalize',\n              color: 'rgba(255, 255, 255, 1)'\n            },\n            children: \"Add Tasklist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            style: {\n              marginTop: '15px',\n              width: 'auto',\n              background: 'rgba(237, 28, 36, 1)',\n              borderRadius: '3px',\n              border: '0 none',\n              padding: '15px 42px',\n              fontSize: '16px',\n              fontWeight: '500',\n              lineHeight: '16px',\n              cursor: 'pointer',\n              textTransform: 'capitalize',\n              color: 'rgba(255, 255, 255, 1)'\n            },\n            disabled: true,\n            children: [/*#__PURE__*/_jsxDEV(Spinner, {\n              as: \"span\",\n              animation: \"grow\",\n              size: \"sm\",\n              role: \"status\",\n              \"aria-hidden\": \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this), \"Loading...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 363\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Dashboard, \"ufy31j7+5HfP21JTfJT0caOb/T0=\", false, function () {\n  return [useCookies, useValidator];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Projects/whosin/Frontend/src/components/Dashboard.js"],"names":["React","useState","useEffect","Button","Spinner","useValidator","addTasklist","useCookies","Dashboard","props","cookies","setCookie","loggedInUserId","storedData","JSON","parse","localStorage","getItem","user_id","path","validator","showValidationMessage","loading","setLoading","tasklist","setTasklist","tasklistname","taskchallenge","alert","userid","loggedinuser","inputVal","e","name","value","target","submittasklist","preventDefault","allValid","res","data","message","maxWidth","display","justifyContent","fontSize","height","className","messages","required","marginTop","width","background","borderRadius","border","padding","fontWeight","lineHeight","cursor","textTransform","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Button, Spinner } from 'react-bootstrap'\r\nimport useValidator from './useValidator'\r\nimport { addTasklist } from '../Services/userapi'\r\nimport { useCookies } from 'react-cookie';\r\nconst Dashboard = (props) => {\r\n    const [cookies, setCookie] = useCookies([]);\r\n    let loggedInUserId = \"\";\r\n    const storedData = JSON.parse(localStorage.getItem(\"MyUser\"));\r\n    if (storedData) {\r\n        loggedInUserId = storedData.user_id;\r\n        //if(!cookies.userid){\r\n            setCookie('userid', loggedInUserId, { path: '/' });\r\n        //}\r\n    }\r\n    const [validator, showValidationMessage] = useValidator()\r\n    const [loading, setLoading] = useState(false);\r\n    const [tasklist, setTasklist] = useState({\r\n        tasklistname: \"\",\r\n        taskchallenge: \"\",\r\n        user_id: \"\"\r\n    })\r\n    alert(cookies.userid)\r\n    // set the props as a default user_id in tasklist state\r\n    useEffect(() => {\r\n        if (props.loggedinuser.user_id) {\r\n            setTasklist({ ...tasklist, user_id: props.loggedinuser.user_id });\r\n        }\r\n    }, [props.loggedinuser.user_id]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const inputVal = (e) => {\r\n        const { name, value } = e.target;\r\n        setTasklist({\r\n            ...tasklist,\r\n            [name]: value\r\n        })\r\n    }\r\n    const submittasklist = async (e) => {\r\n        e.preventDefault();\r\n        if (validator.allValid()) {\r\n            setLoading(true);\r\n            let res = await addTasklist(tasklist);\r\n            if (res.data.message === \"Tasklist Added Successfully\") {\r\n                alert(res.data.message)\r\n                setLoading(false);\r\n                setTasklist({\r\n                    tasklistname: \"\",\r\n                    taskchallenge: \"\",\r\n                    user_id: props.loggedinuser.user_id\r\n                })\r\n            } else {\r\n                setLoading(false);\r\n                alert(res.data.message)\r\n            }\r\n        } else {\r\n            showValidationMessage(true);\r\n        }\r\n    }\r\n    //console.log(\"AAAA\", tasklist)\r\n    return (\r\n        <>\r\n            <div className=\"outsider\">\r\n                <div className=\"login\" style={{ maxWidth: '70%' }}>\r\n                    <form onSubmit={(e) => { submittasklist(e) }}>\r\n                        <div style={{ display: 'flex', justifyContent: 'center', fontSize: '18px' }}>Enter Your Tasklist and Task Challenge</div>\r\n                        <textarea style={{ height: '120px' }} className=\"newinputval\" value={tasklist.tasklistname} placeholder=\"Enter your tasklist\" name=\"tasklistname\" onChange={inputVal} />\r\n                        {/**********   This is where the magic happens     ***********/}\r\n                        {validator.message('tasklistname', tasklist.tasklistname, 'required', {\r\n                            className: 'text-danger spaceparttasklist',\r\n                            messages: {\r\n                                required: \"Tasklist is required\"\r\n                            }\r\n                        })}\r\n\r\n                        <textarea style={{ height: '100px' }} className=\"newinputval\" value={tasklist.taskchallenge} placeholder=\"Enter your task challenge\" name=\"taskchallenge\" onChange={inputVal} />\r\n                        {/*validator.message('taskchallenge', tasklist.taskchallenge, 'required', {\r\n                            className: 'text-danger spaceparttasklist',\r\n                            messages: {\r\n                                required: \"Task challenge is required\"\r\n                            }\r\n                        })*/}\r\n\r\n                        {!loading ? <Button type=\"submit\" style={{ marginTop: '15px', width: 'auto', background: 'rgba(237, 28, 36, 1)', borderRadius: '3px', border: '0 none', padding: '15px 42px', fontSize: '16px', fontWeight: '500', lineHeight: '16px', cursor: 'pointer', textTransform: 'capitalize', color: 'rgba(255, 255, 255, 1)' }}>Add Tasklist</Button> : <Button variant=\"primary\" style={{ marginTop: '15px', width: 'auto', background: 'rgba(237, 28, 36, 1)', borderRadius: '3px', border: '0 none', padding: '15px 42px', fontSize: '16px', fontWeight: '500', lineHeight: '16px', cursor: 'pointer', textTransform: 'capitalize', color: 'rgba(255, 255, 255, 1)' }} disabled>\r\n                            <Spinner\r\n                                as=\"span\"\r\n                                animation=\"grow\"\r\n                                size=\"sm\"\r\n                                role=\"status\"\r\n                                aria-hidden=\"true\"\r\n                            />\r\n                            Loading...\r\n                        </Button>}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}