{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\whosin\\\\Frontend\\\\src\\\\components\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Spinner } from 'react-bootstrap';\nimport useValidator from './useValidator';\nimport { adminLogin } from '../Services/userapi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = props => {\n  _s();\n\n  const history = useHistory();\n  const [validator, showValidationMessage] = useValidator();\n  const [loading, setLoading] = useState(false);\n  const [tasklist, setTasklist] = useState({\n    tasklistname: \"\",\n    taskchallenge: \"\"\n  });\n\n  const inputVal = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setTasklist({ ...user,\n      [name]: value\n    });\n  }; //axios.post(\"http://localhost:9001/user/login\", user).then((res) => { })\n\n\n  const loginUser = async e => {\n    e.preventDefault();\n\n    if (validator.allValid()) {\n      setLoading(true);\n      let res = await adminLogin(user);\n      console.log(res);\n\n      if (res.data.message === \"Login Successfully\") {\n        alert(res.data.message);\n        props.updateUserinlocalStorage(res.data.user);\n        setLoading(false);\n        history.push(\"/\");\n      } else {\n        setLoading(false);\n        alert(res.data.message);\n      }\n    } else {\n      showValidationMessage(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outsider\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => {\n            submittasklist(e);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"newinputval\",\n            value: tasklist.tasklistname,\n            placeholder: \"Enter your tasklist\",\n            name: \"tasklistname\",\n            onChange: inputVal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), validator.message('tasklistname', tasklist.tasklistname, 'required', {\n            className: 'text-danger spacepart',\n            messages: {\n              required: \"Tasklist is required\"\n            }\n          }), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"newinputval\",\n            value: tasklist.taskchallenge,\n            placeholder: \"Enter your task challenge\",\n            name: \"taskchallenge\",\n            onChange: inputVal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), validator.message('taskchallenge', tasklist.taskchallenge, 'required', {\n            className: 'text-danger spacepart',\n            messages: {\n              required: \"Task challenge is required\"\n            }\n          }), !loading ? /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            style: {\n              marginTop: '15px',\n              width: 'auto',\n              background: 'rgba(237, 28, 36, 1)',\n              borderRadius: '3px',\n              border: '0 none',\n              padding: '15px 42px',\n              fontSize: '16px',\n              fontWeight: '500',\n              lineHeight: '16px',\n              cursor: 'pointer',\n              textTransform: 'capitalize',\n              color: 'rgba(255, 255, 255, 1)'\n            },\n            children: \"Add Tasklist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            style: {\n              marginTop: '15px',\n              width: 'auto',\n              background: 'rgba(237, 28, 36, 1)',\n              borderRadius: '3px',\n              border: '0 none',\n              padding: '15px 42px',\n              fontSize: '16px',\n              fontWeight: '500',\n              lineHeight: '16px',\n              cursor: 'pointer',\n              textTransform: 'capitalize',\n              color: 'rgba(255, 255, 255, 1)'\n            },\n            disabled: true,\n            children: [/*#__PURE__*/_jsxDEV(Spinner, {\n              as: \"span\",\n              animation: \"grow\",\n              size: \"sm\",\n              role: \"status\",\n              \"aria-hidden\": \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this), \"Loading...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 363\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Dashboard, \"Pmb2aNIUbkPE0X/dVR4vuakBlKA=\", false, function () {\n  return [useHistory, useValidator];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Projects/whosin/Frontend/src/components/Dashboard.js"],"names":["React","useState","useEffect","useHistory","Button","Spinner","useValidator","adminLogin","Dashboard","props","history","validator","showValidationMessage","loading","setLoading","tasklist","setTasklist","tasklistname","taskchallenge","inputVal","e","name","value","target","user","loginUser","preventDefault","allValid","res","console","log","data","message","alert","updateUserinlocalStorage","push","submittasklist","className","messages","required","marginTop","width","background","borderRadius","border","padding","fontSize","fontWeight","lineHeight","cursor","textTransform","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button, Spinner } from 'react-bootstrap'\r\nimport useValidator from './useValidator'\r\nimport { adminLogin } from '../Services/userapi'\r\nconst Dashboard = (props) => {\r\n    const history = useHistory();\r\n    const [validator, showValidationMessage] = useValidator()\r\n    const [loading, setLoading] = useState(false);\r\n    const [tasklist, setTasklist] = useState({\r\n        tasklistname: \"\",\r\n        taskchallenge: \"\"\r\n    })\r\n    const inputVal = (e) => {\r\n        const { name, value } = e.target;\r\n        setTasklist({\r\n            ...user,\r\n            [name]: value\r\n        })\r\n    }\r\n    //axios.post(\"http://localhost:9001/user/login\", user).then((res) => { })\r\n    const loginUser = async (e) => {\r\n        e.preventDefault();\r\n        if (validator.allValid()) {\r\n            setLoading(true);\r\n            let res = await adminLogin(user);\r\n            console.log(res);\r\n            if (res.data.message === \"Login Successfully\") {\r\n                alert(res.data.message)\r\n                props.updateUserinlocalStorage(res.data.user);\r\n                setLoading(false);\r\n                history.push(\"/\");\r\n            } else {\r\n                setLoading(false);\r\n                alert(res.data.message)\r\n            }\r\n        } else {\r\n            showValidationMessage(true);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"outsider\">\r\n                <div className=\"dashboard\">\r\n                    <form onSubmit={(e) => { submittasklist(e) }}>\r\n                        <textarea className=\"newinputval\" value={tasklist.tasklistname} placeholder=\"Enter your tasklist\" name=\"tasklistname\" onChange={inputVal} />\r\n                        {/**********   This is where the magic happens     ***********/}\r\n                        {validator.message('tasklistname', tasklist.tasklistname, 'required', {\r\n                            className: 'text-danger spacepart',\r\n                            messages: {\r\n                                required: \"Tasklist is required\"\r\n                            }\r\n                        })}\r\n\r\n                        <textarea className=\"newinputval\" value={tasklist.taskchallenge} placeholder=\"Enter your task challenge\" name=\"taskchallenge\" onChange={inputVal} />\r\n                        {validator.message('taskchallenge', tasklist.taskchallenge, 'required', {\r\n                            className: 'text-danger spacepart',\r\n                            messages: {\r\n                                required: \"Task challenge is required\"\r\n                            }\r\n                        })}\r\n\r\n                        {!loading ? <Button type=\"submit\" style={{ marginTop: '15px', width: 'auto', background: 'rgba(237, 28, 36, 1)', borderRadius: '3px', border: '0 none', padding: '15px 42px', fontSize: '16px', fontWeight: '500', lineHeight: '16px', cursor: 'pointer', textTransform: 'capitalize', color: 'rgba(255, 255, 255, 1)' }}>Add Tasklist</Button> : <Button variant=\"primary\" style={{ marginTop: '15px', width: 'auto', background: 'rgba(237, 28, 36, 1)', borderRadius: '3px', border: '0 none', padding: '15px 42px', fontSize: '16px', fontWeight: '500', lineHeight: '16px', cursor: 'pointer', textTransform: 'capitalize', color: 'rgba(255, 255, 255, 1)' }} disabled>\r\n                            <Spinner\r\n                                as=\"span\"\r\n                                animation=\"grow\"\r\n                                size=\"sm\"\r\n                                role=\"status\"\r\n                                aria-hidden=\"true\"\r\n                            />\r\n                            Loading...\r\n                        </Button>}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}