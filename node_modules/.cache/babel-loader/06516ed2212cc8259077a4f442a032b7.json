{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Login_Register_App\\\\login-and-register-frontend\\\\src\\\\components\\\\AddCategory.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom'; //import axios from 'axios';\n\nimport useValidator from './useValidator';\nimport { getsingleUsers, addUsers, editUsers } from '../Services/userapi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AddCategory = () => {\n  _s();\n\n  let myButton = '';\n  let disfield = '';\n  let {\n    userID\n  } = useParams();\n  const history = useHistory();\n  const [validator, showValidationMessage] = useValidator();\n  const [user, setUser] = useState({\n    f_name: \"\",\n    l_name: \"\",\n    email: \"\",\n    phone: \"\",\n    usertype: \"\",\n    password: \"\",\n    confPassword: \"\"\n  });\n  useEffect(() => {\n    async function getusedata() {\n      if (userID && userID !== undefined) {\n        //axios.get(\"http://localhost:9001/user/userdata/\" + userID).then((res) => {\n        let res = await getsingleUsers(userID);\n        setUser({\n          f_name: res.data.userdata.first_name,\n          l_name: res.data.userdata.last_name,\n          email: res.data.userdata.email,\n          phone: res.data.userdata.phone,\n          usertype: res.data.userdata.user_type,\n          password: \"\",\n          confPassword: \"\"\n        });\n      }\n    }\n\n    getusedata();\n  }, [userID]);\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem(\"MyUser\"));\n\n    if (!storedData._id) {\n      history.push(\"/\");\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const inputVal = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUser({ ...user,\n      [name]: value\n    });\n  };\n\n  const addUser = async () => {\n    if (validator.allValid()) {\n      let response = await addUsers(user);\n\n      if (response.data.message === 'User already registerd. Please use another email!') {\n        alert(response.data.message);\n      } else {\n        alert(response.data.message);\n        history.push(\"/users\");\n      }\n    } else {\n      showValidationMessage(true);\n    }\n  }; //axios.put(`http://localhost:9001/user/editUser/${userID}`, user).then((res) => { })\n\n\n  const updateUser = async () => {\n    if (validator.allValid()) {\n      let response = await editUsers(userID, user);\n\n      if (response.data.message === 'user updated successfully') {\n        alert(response.data.message);\n        history.push(\"/users\");\n      } else {\n        alert(response.data.message);\n      }\n    } else {\n      showValidationMessage(true);\n    }\n  };\n\n  if (userID && userID !== undefined) {\n    myButton = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mybutton\",\n      onClick: () => {\n        updateUser();\n      },\n      children: \"Update User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 20\n    }, this);\n    disfield = 'disabled';\n  } else {\n    myButton = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mybutton\",\n      onClick: () => {\n        addUser();\n      },\n      children: \"Add User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 20\n    }, this);\n    disfield = '';\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centerform\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"register\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: userID && userID !== undefined ? \"Update Category\" : \"Add Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '100%',\n            minHeight: '76px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              float: 'left',\n              width: '50%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"myinputclass\",\n              type: \"text\",\n              value: user.f_name,\n              placeholder: \"First Name\",\n              name: \"f_name\",\n              onChange: inputVal\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 29\n            }, this), validator.message('f_name', user.f_name, 'required', {\n              className: 'text-danger mywidth',\n              messages: {\n                required: \"First Name is required\"\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              float: 'right',\n              width: '50%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"myinputclass\",\n              style: {\n                marginLeft: \"15px\"\n              },\n              type: \"text\",\n              value: user.l_name,\n              placeholder: \"Last Name\",\n              name: \"l_name\",\n              onChange: inputVal\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 29\n            }, this), validator.message('l_name', user.l_name, 'required', {\n              className: 'text-danger mywidth',\n              messages: {\n                required: \"Last Name is required\"\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '100%',\n            minHeight: '76px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              float: 'left',\n              width: '50%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"myinputclass\",\n              type: \"text\",\n              disabled: disfield,\n              value: user.email,\n              placeholder: \"Email Address\",\n              name: \"email\",\n              onChange: inputVal\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this), userID && userID !== undefined ? \"\" : validator.message('email', user.email, 'required|email', {\n              className: 'text-danger mywidth',\n              messages: {\n                required: \"Email is required\"\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              float: 'right',\n              width: '50%'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"myinputclass\",\n              style: {\n                marginLeft: \"15px\"\n              },\n              type: \"text\",\n              value: user.phone,\n              placeholder: \"Phone\",\n              name: \"phone\",\n              onChange: inputVal\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '100%',\n            minHeight: '76px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            style: {\n              width: '95%'\n            },\n            className: \"myinputclass\",\n            name: \"usertype\",\n            value: user.usertype,\n            onChange: inputVal,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Please Select User Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Super Admin\",\n              children: \"Super Admin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Admin\",\n              children: \"Admin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Staff\",\n              children: \"Staff\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Account\",\n              children: \"Account\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this), validator.message('usertype', user.usertype, 'required', {\n            className: 'text-danger mywidth',\n            messages: {\n              required: \"User Type is required\"\n            }\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '100%',\n            marginTop: '3%'\n          },\n          children: myButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"OR\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button\",\n          onClick: () => {\n            history.push(\"/category\");\n          },\n          children: \"Back \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(AddCategory, \"tPo9rHXCWLQhW8UxQsr0Oysq2p8=\", false, function () {\n  return [useParams, useHistory, useValidator];\n});\n\n_c = AddCategory;\nexport default AddCategory;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCategory\");","map":{"version":3,"sources":["C:/Projects/Login_Register_App/login-and-register-frontend/src/components/AddCategory.js"],"names":["React","useState","useEffect","useHistory","useParams","useValidator","getsingleUsers","addUsers","editUsers","AddCategory","myButton","disfield","userID","history","validator","showValidationMessage","user","setUser","f_name","l_name","email","phone","usertype","password","confPassword","getusedata","undefined","res","data","userdata","first_name","last_name","user_type","storedData","JSON","parse","localStorage","getItem","_id","push","inputVal","e","name","value","target","addUser","allValid","response","message","alert","updateUser","width","minHeight","float","className","messages","required","marginLeft","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n//import axios from 'axios';\r\nimport useValidator from './useValidator'\r\nimport { getsingleUsers, addUsers, editUsers } from '../Services/userapi'\r\nconst AddCategory = () => {\r\n    let myButton = '';\r\n    let disfield = '';\r\n    let { userID } = useParams();\r\n    const history = useHistory();\r\n    const [validator, showValidationMessage] = useValidator()\r\n    const [user, setUser] = useState({\r\n        f_name: \"\",\r\n        l_name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        usertype: \"\",\r\n        password: \"\",\r\n        confPassword: \"\"\r\n    })\r\n\r\n    useEffect(() => {\r\n        async function getusedata() {\r\n            if (userID && userID !== undefined) {\r\n                //axios.get(\"http://localhost:9001/user/userdata/\" + userID).then((res) => {\r\n                let res = await getsingleUsers(userID);\r\n                setUser({\r\n                    f_name: res.data.userdata.first_name,\r\n                    l_name: res.data.userdata.last_name,\r\n                    email: res.data.userdata.email,\r\n                    phone: res.data.userdata.phone,\r\n                    usertype: res.data.userdata.user_type,\r\n                    password: \"\",\r\n                    confPassword: \"\"\r\n                })\r\n            }\r\n        }\r\n        getusedata()\r\n    }, [userID])\r\n\r\n    useEffect(() => {\r\n        const storedData = JSON.parse(localStorage.getItem(\"MyUser\"));\r\n        if (!storedData._id) {\r\n            history.push(\"/\");\r\n        }\r\n    }, [])   // eslint-disable-line react-hooks/exhaustive-deps\r\n    const inputVal = (e) => {\r\n        const { name, value } = e.target;\r\n        setUser({\r\n            ...user,\r\n            [name]: value\r\n        })\r\n    }\r\n    const addUser = async () => {\r\n        if (validator.allValid()) {\r\n            let response = await addUsers(user);\r\n            if (response.data.message === 'User already registerd. Please use another email!') {\r\n                alert(response.data.message);\r\n            } else {\r\n                alert(response.data.message);\r\n                history.push(\"/users\");\r\n            }\r\n        } else {\r\n            showValidationMessage(true);\r\n        }\r\n    }\r\n    //axios.put(`http://localhost:9001/user/editUser/${userID}`, user).then((res) => { })\r\n    const updateUser = async () => {\r\n        if (validator.allValid()) {\r\n            let response = await editUsers(userID, user);\r\n            if (response.data.message === 'user updated successfully') {\r\n                alert(response.data.message);\r\n                history.push(\"/users\");\r\n            }else{\r\n                alert(response.data.message);\r\n            }\r\n        } else {\r\n            showValidationMessage(true);\r\n        }\r\n    }\r\n    if (userID && userID !== undefined) {\r\n        myButton = <div className=\"mybutton\" onClick={() => { updateUser() }}>Update User</div>\r\n        disfield = 'disabled'\r\n    } else {\r\n        myButton = <div className=\"mybutton\" onClick={() => { addUser() }}>Add User</div>\r\n        disfield = ''\r\n    }\r\n    return (\r\n        <>\r\n            {/* onChange={(e)=>{setUser({...user, f_name: e.target.value})}} */}\r\n            <div className=\"centerform\">\r\n                <div className=\"register\">\r\n                    <h1>{userID && userID !== undefined ? \"Update Category\" : \"Add Category\"}</h1>\r\n\r\n                    <div style={{ width: '100%', minHeight: '76px' }}>\r\n                        <div style={{ float: 'left', width: '50%' }}>\r\n                            <input className=\"myinputclass\" type=\"text\" value={user.f_name} placeholder=\"First Name\" name=\"f_name\" onChange={inputVal} />\r\n                            {validator.message('f_name', user.f_name, 'required', {\r\n                                className: 'text-danger mywidth',\r\n                                messages: {\r\n                                    required: \"First Name is required\"\r\n                                }\r\n                            })}\r\n                        </div>\r\n                        <div style={{ float: 'right', width: '50%' }}>\r\n                            <input className=\"myinputclass\" style={{ marginLeft: \"15px\" }} type=\"text\" value={user.l_name} placeholder=\"Last Name\" name=\"l_name\" onChange={inputVal} />\r\n                            {validator.message('l_name', user.l_name, 'required', {\r\n                                className: 'text-danger mywidth',\r\n                                messages: {\r\n                                    required: \"Last Name is required\"\r\n                                }\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', minHeight: '76px' }}>\r\n                        <div style={{ float: 'left', width: '50%' }}>\r\n                            <input className=\"myinputclass\" type=\"text\" disabled={disfield} value={user.email} placeholder=\"Email Address\" name=\"email\" onChange={inputVal} />\r\n                            {userID && userID !== undefined ? \"\" :\r\n                                validator.message('email', user.email, 'required|email', {\r\n                                    className: 'text-danger mywidth',\r\n                                    messages: {\r\n                                        required: \"Email is required\"\r\n                                    }\r\n                                })\r\n                            }\r\n                        </div>\r\n                        <div style={{ float: 'right', width: '50%' }}>\r\n                            <input className=\"myinputclass\" style={{ marginLeft: \"15px\" }} type=\"text\" value={user.phone} placeholder=\"Phone\" name=\"phone\" onChange={inputVal} />\r\n                        </div>\r\n                    </div>\r\n                    <div style={{ width: '100%', minHeight: '76px' }}>\r\n                        <select style={{ width: '95%' }} className=\"myinputclass\" name=\"usertype\" value={user.usertype} onChange={inputVal}>\r\n                            <option value=\"\">\r\n                                Please Select User Type\r\n                            </option>\r\n                            <option value=\"Super Admin\">\r\n                                Super Admin\r\n                            </option>\r\n                            <option value=\"Admin\">\r\n                                Admin\r\n                            </option>\r\n                            <option value=\"Staff\">\r\n                                Staff\r\n                            </option>\r\n                            <option value=\"Account\">\r\n                                Account\r\n                            </option>\r\n                        </select>\r\n                        {validator.message('usertype', user.usertype, 'required', {\r\n                            className: 'text-danger mywidth',\r\n                            messages: {\r\n                                required: \"User Type is required\"\r\n                            }\r\n                        })}\r\n                    </div>\r\n                    <div style={{ width: '100%', marginTop: '3%' }}>\r\n                        {myButton}\r\n                    </div>\r\n                    <div>OR</div>\r\n                    <div className=\"button\" onClick={() => { history.push(\"/category\") }}>Back </div>\r\n                    {/*<div>OR</div>\r\n                    <div className=\"button\" onClick={() => { history.push(\"/login\") }}>Login </div>*/}\r\n                    {/* OR <Link to=\"/login\">Login</Link> */}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default AddCategory;"]},"metadata":{},"sourceType":"module"}