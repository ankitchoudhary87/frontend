{"ast":null,"code":"import { useCookies } from 'react-cookie';\nconst convertedVapidKey = urlBase64ToUint8Array(process.env.REACT_APP_PUBLIC_VAPID_KEY);\nconst usersUrl = 'http://localhost:9001/user';\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4); // eslint-disable-next-line\n\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\");\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}\n\nfunction sendSubscription(subscription, userID) {\n  alert(userID);\n  return fetch(`${usersUrl}/notifications`, {\n    method: 'POST',\n    body: JSON.stringify({\n      subdata: subscription,\n      cokkID: 2012\n    }),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\nexport function subscribeUser(u) {\n  alert(u); //const [cookies, setCookie] = useCookies(['userid']);\n\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      if (!registration.pushManager) {\n        console.log('Push manager unavailable.');\n        return;\n      }\n\n      registration.pushManager.getSubscription().then(function (existedSubscription) {\n        if (existedSubscription === null) {\n          console.log('No subscription detected, make a request.');\n          registration.pushManager.subscribe({\n            applicationServerKey: convertedVapidKey,\n            userVisibleOnly: true\n          }).then(function (newSubscription) {\n            console.log('New subscription added.');\n            sendSubscription(newSubscription, cookies.userid);\n          }).catch(function (e) {\n            if (Notification.permission !== 'granted') {\n              console.log('Permission was not granted.');\n            } else {\n              console.error('An error ocurred during the subscription process.', e);\n            }\n          });\n        } else {\n          console.log('Existed subscription detected.');\n          sendSubscription(existedSubscription, cookies.userid);\n        }\n      });\n    }).catch(function (e) {\n      console.error('An error ocurred during Service Worker registration.', e);\n    });\n  }\n}","map":{"version":3,"sources":["C:/Projects/whosin/Frontend/src/subscription.js"],"names":["useCookies","convertedVapidKey","urlBase64ToUint8Array","process","env","REACT_APP_PUBLIC_VAPID_KEY","usersUrl","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","sendSubscription","subscription","userID","alert","fetch","method","body","JSON","stringify","subdata","cokkID","headers","subscribeUser","u","navigator","serviceWorker","ready","then","registration","pushManager","console","log","getSubscription","existedSubscription","subscribe","applicationServerKey","userVisibleOnly","newSubscription","cookies","userid","catch","e","Notification","permission","error"],"mappings":"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","sourcesContent":["import { useCookies } from 'react-cookie';\nconst convertedVapidKey = urlBase64ToUint8Array(process.env.REACT_APP_PUBLIC_VAPID_KEY)\nconst usersUrl = 'http://localhost:9001/user';\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = \"=\".repeat((4 - base64String.length % 4) % 4)\n  // eslint-disable-next-line\n  const base64 = (base64String + padding).replace(/\\-/g, \"+\").replace(/_/g, \"/\")\n\n  const rawData = window.atob(base64)\n  const outputArray = new Uint8Array(rawData.length)\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i)\n  }\n  return outputArray\n}\n\nfunction sendSubscription(subscription, userID) { \n  alert(userID);\n  return fetch(`${usersUrl}/notifications`, {\n    method: 'POST',\n    body: JSON.stringify({subdata: subscription, cokkID: 2012}),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n}\n\nexport function subscribeUser(u) {\n  alert(u)\n  //const [cookies, setCookie] = useCookies(['userid']);\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function(registration) {\n      if (!registration.pushManager) {\n        console.log('Push manager unavailable.')\n        return\n      }\n\n      registration.pushManager.getSubscription().then(function(existedSubscription) {\n        if (existedSubscription === null) {\n          console.log('No subscription detected, make a request.')\n          registration.pushManager.subscribe({\n            applicationServerKey: convertedVapidKey,\n            userVisibleOnly: true,\n          }).then(function(newSubscription) {\n            console.log('New subscription added.')\n            sendSubscription(newSubscription, cookies.userid)\n          }).catch(function(e) {\n            if (Notification.permission !== 'granted') {\n              console.log('Permission was not granted.')\n            } else {\n              console.error('An error ocurred during the subscription process.', e)\n            }\n          })\n        } else {\n          console.log('Existed subscription detected.')\n          sendSubscription(existedSubscription, cookies.userid)\n        }\n      })\n    })\n      .catch(function(e) {\n        console.error('An error ocurred during Service Worker registration.', e)\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}